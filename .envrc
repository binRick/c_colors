is_iterm2(){
    if [[ "$ITERM_SESSION_ID" != "" ]];
    then
        true
    else
        false
    fi
}

#paleta <  ~/.palettes/tomorrow-night-dark

#kfc -s base16-outrun
#kfc -s sexy-phrak1
#ALACRITTY_FONT=Glass_TTY_VT220
kitty_title(){
if ! is_iterm2; then
  if [[ "$KITTY_PID" -gt 0 ]]; then
	kitty @ set-tab-title "   :: c_colors ::   "
	#    kitty @ set-tab-color active_fg=black active_bg=blue
	kitty @ env REPO="$(dirname $(pwd))"
	#kitty @ set-font-size 25
	#kitty @ set-colors .Kitty.conf
	#kitty @ set-background-opacity .99
	#kitty @ goto-layout vertical
	#kitty @ set-colors background=#121212
    icat="kitty +kitten icat"
  fi 
  if [[ -e "$ALACRITTY_SOCKET" ]]; then
	#pycritty -f "$ALACRITTY_FONT"
	true
  fi
fi
}

clr() {
	ID=$1
	SQLITE_FILE=.bcn.sqlite
	TEXT_COLOR="black"
	FONT="Hack-Bold-Italic-Nerd-Font-Complete"
	TEXT_SIZE=100
	[[ -d tmp-png ]] && rm -rf tmp-png
	mkdir -p tmp-png
	F=color
	TEXT_BACK_COLOR=white
	TD=$(pwd)/tmp-png
	JSON_FILE=$TD/color.json
	PNG1=$TD/${F}-1.png
	PNG2=$TD/${F}-2.png
	PNG3=$TD/${F}-3.png
	PNG4=$TD/${F}-4.png
	PNG5=$TD/${F}-5.png

	sqlite3 "$SQLITE_FILE" <<<'select data from blobs order by RANDOM() limit 1' | jq -Mrc | tee "$JSON_FILE" | jq '.encoded_png_content' -Mrc | base64 -d >"$PNG1"
	COLOR="$(jq <$JSON_FILE | jq -Mrc '.name')"
	HEX="$(jq <$JSON_FILE | jq -Mrc '.hex')"
	ANSICODE="$(jq <$JSON_FILE | jq -Mrc '.ansicode')"
	convert -resize 1000x "$PNG1" "$PNG2"

	convert -stroke "$TEXT_COLOR" -font "$FONT" -pointsize "$TEXT_SIZE" -gravity center \
		-annotate "+0+-300" "$COLOR" \
		-annotate "+0+-100" "$HEX" \
		-annotate "+0+100" "$ANSICODE" \
		"$PNG2" "$PNG3"

	#ls -altr $PNG1 $PNG2 $PNG3 $JSON
	#kitty +kitten icat $PNG3
	convert -resize 500x $PNG3 $PNG4

	LEFT=5
	TOP=$(($ID * 5))
	kitty +kitten icat --align=right --place="10x10@${LEFT}x${TOP}" $PNG4

	#kitty + icat --print-window-size
	#1416x1325%
}
kitty_color_demo() {
	reset
	CURCHARS="$(ansi --report-window-chars)"
	CURSIZE="$(ansi --report-window-pixels)"
	CURROWCHARS=$(echo $CURCHARS | cut -d, -f1)
	CURCOLCHARS=$(echo $CURCHARS | cut -d, -f2)
	CURROWS=$(echo $CURSIZE | cut -d, -f1)
	CURCOLS=$(echo $CURSIZE | cut -d, -f2)
	ansi --yellow "$CURROWS/$CURCOLS PIXELS"
	ansi --cyan "$CURROWCHARS/$CURCOLCHARS CHARS"
	COLORS_QTY=2
	kitty +kitten icat --clear
	for x in $(seq 1 $COLORS_QTY); do clr "$x"; done
}




















__scc_files(){
    find \
        meson/meson.build submodules/meson.build meson.build \
        scripts \
        Makefile \
        meson_options.txt \
        */*.c -type f\
    |egrep '\.txt$|Makefile$|\.sh$|\.build$|\.h$|\.c$'\
    |egrep -v 'submodules/'\
    |sort -u\
    |tr '\n' ' '
}

__scc_report(){
    scc -v -f wide --by-file $(__scc_files)
}

#do_src_report
__scc_report






